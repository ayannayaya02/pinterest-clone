{"ast":null,"code":"var simpleIsEqual = function simpleIsEqual(a, b) {\n  return a === b;\n};\nfunction index(resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {\n    return isEqual(newArg, lastArgs[index]);\n  };\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {\n      return lastResult;\n    }\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n  return result;\n}\nexport default index;","map":{"version":3,"names":["simpleIsEqual","a","b","index","resultFn","isEqual","lastThis","lastArgs","lastResult","calledOnce","isNewArgEqualToLast","newArg","result","_len","arguments","length","newArgs","Array","_key","every","apply"],"sources":["C:/Users/Starg/profile/pinterest-clone/node_modules/memoize-one/dist/memoize-one.esm.js"],"sourcesContent":["var simpleIsEqual = function simpleIsEqual(a, b) {\n  return a === b;\n};\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {\n    return isEqual(newArg, lastArgs[index]);\n  };\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n"],"mappings":"AAAA,IAAIA,aAAa,GAAG,SAASA,aAAaA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC/C,OAAOD,CAAC,KAAKC,CAAC;AAChB,CAAC;AAED,SAASC,KAAKA,CAAEC,QAAQ,EAAEC,OAAO,EAAE;EACjC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAGL,aAAa;EACzB;EAEA,IAAIM,QAAQ;EACZ,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,UAAU;EACd,IAAIC,UAAU,GAAG,KAAK;EAEtB,IAAIC,mBAAmB,GAAG,SAASA,mBAAmBA,CAACC,MAAM,EAAER,KAAK,EAAE;IACpE,OAAOE,OAAO,CAACM,MAAM,EAAEJ,QAAQ,CAACJ,KAAK,CAAC,CAAC;EACzC,CAAC;EAED,IAAIS,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAC7B,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,OAAO,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MAC1FF,OAAO,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IACjC;IAEA,IAAIT,UAAU,IAAIH,QAAQ,KAAK,IAAI,IAAIU,OAAO,CAACD,MAAM,KAAKR,QAAQ,CAACQ,MAAM,IAAIC,OAAO,CAACG,KAAK,CAACT,mBAAmB,CAAC,EAAE;MAC/G,OAAOF,UAAU;IACnB;IAEAA,UAAU,GAAGJ,QAAQ,CAACgB,KAAK,CAAC,IAAI,EAAEJ,OAAO,CAAC;IAC1CP,UAAU,GAAG,IAAI;IACjBH,QAAQ,GAAG,IAAI;IACfC,QAAQ,GAAGS,OAAO;IAClB,OAAOR,UAAU;EACnB,CAAC;EAED,OAAOI,MAAM;AACf;AAEA,eAAeT,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}